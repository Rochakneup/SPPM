@model IEnumerable<Inventory.Models.Product>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>

<!-- Main container -->
<div class="container mt-5">
    <h1 class="mb-4 text-center">@ViewData["Title"]</h1>

    <!-- Carousel -->
    <div id="productCarousel" class="carousel slide mt-4" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="/assets/bg1.jpg" class="d-block w-100 carousel-img" alt="Slide 1">
                <div class="carousel-caption d-none d-md-block"></div>
            </div>
            <div class="carousel-item">
                <img src="/assets/bg2.jpg" class="d-block w-100 carousel-img" alt="Slide 2">
                <div class="carousel-caption d-none d-md-block"></div>
            </div>
            <div class="carousel-item">
                <img src="/assets/bg3.jpg" class="d-block w-100 carousel-img" alt="Slide 3">
                <div class="carousel-caption d-none d-md-block"></div>
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
    <br />

    <!-- Headline Section -->
    <div class="text-center mb-4">
        <h2 class="display-4">Explore Our Products</h2>
        <p class="lead">Discover a variety of products curated just for you. Browse through our latest collections and find your favorites!</p>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <!-- Category Filter -->
            <div class="category-list mb-2">
                <a href="@Url.Action("Index", new { categoryId = (int?)null })" class="btn btn-category">All Categories</a>
                @foreach (var category in ViewData["Categories"] as List<Inventory.Models.Category>)
                {
                    <a href="@Url.Action("Index", new { categoryId = category.Id })" class="btn btn-category">@category.Name</a>
                }
            </div>

            <!-- Search Bar -->
            <div class="search-container">
                <input type="text" id="searchBar" class="form-control" placeholder="Search products..." />
                <button id="searchBtn" class="btn btn-primary btn-search">Search</button>
            </div>
        </div>
    </div>

    <!-- Product Grid -->
    <div id="productContainer" class="row">
        @foreach (var product in Model)
        {
            <div class="col-md-4 mb-4 product-card" data-name="@product.Name">
                <div class="card">
                    <img src="@Url.Content(product.ImageUrl)" class="card-img-top" alt="Product Image">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p class="card-text">Price: Rs.@product.Price</p>

                        @if (product.Quantity > 0)
                        {
                            @if (User.Identity.IsAuthenticated)
                            {
                                <form asp-action="AddToCart" asp-controller="Cart" method="post" class="d-inline">
                                    <div class="form-group">
                                        <label for="quantity@product.Id">Quantity</label>
                                        <input type="number" id="quantity@product.Id" name="quantity" value="1" min="1" class="form-control" style="width: 100px;" />
                                    </div>
                                    <input type="hidden" name="productId" value="@product.Id" />
                                    <button type="submit" class="btn btn-primary mt-2">Add to Cart</button>
                                </form>
                                <a href="@Url.Action("Details", "PublicProducts", new { id = product.Id })" class="btn btn-primary mt-2">Details</a>
                            }
                            else
                            {
                                <a href="@Url.Page("/Account/Login", new { area = "Identity" })" class="btn btn-primary">Login to Add to Cart</a>
                                <a href="@Url.Action("Details", "PublicProducts", new { id = product.Id })" class="btn btn-primary">Details</a>
                            }
                        }
                        else
                        {
                            <button class="btn btn-secondary" disabled>Out of Stock</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Chatbot Section -->
<div id="chatBubble" class="chat-bubble">
    <img src="/assets/bot.png" alt="Chat Icon" class="chat-icon">
</div>


<div class="chatbot-container d-none" id="chatContainer">
    <div class="chat-header text-white p-2 rounded-top">
        <h5 class="m-0">Flabby</h5>
        <span class="close-btn" id="closeBtn">&times;</span>
    </div>
    <div class="chat-body bg-light p-3" id="chatBody" style="height: 300px; overflow-y: auto;">
        <!-- Initial message -->
        <img src="/assets/bot.png" alt="Chat gif" class="chat-img">
        <div class="bot-message bg-secondary text-white p-2 rounded mb-2">
            Hi, I am Flabby. How can I help you?

        </div>
        <!-- Dynamic buttons for predefined questions will be added here -->
        <div class="chat-buttons d-flex flex-wrap" id="chatButtons"></div>
    </div>
    <div class="chat-footer p-2 bg-white rounded-bottom d-flex">
        <input type="text" class="form-control flex-grow-1" id="userInput" placeholder="Type your message here..." />
        <button id="sendBtn" class="btn btn-primary ml-2"><i class="fas fa-paper-plane"></i></button> <!-- Icon for the send button -->
    </div>

</div>




@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Fetch predefined responses for the chatbot
            fetch('/PublicProducts/GetPredefinedResponses')
                .then(response => response.json())
                .then(data => {
                    const chatButtonsContainer = document.getElementById('chatButtons');
                    chatButtonsContainer.innerHTML = '';

                    data.forEach(item => {
                        const buttonElement = document.createElement('button');
                        buttonElement.className = 'btn chat-option-btn';
                        buttonElement.textContent = item.question;
                        buttonElement.onclick = () => askQuestion(item.question, item.answer);
                        chatButtonsContainer.appendChild(buttonElement);
                    });
                })
                .catch(error => console.error('Error fetching predefined questions:', error));

            // Toggle chat interface visibility
            const chatBubble = document.getElementById('chatBubble');
            const chatContainer = document.getElementById('chatContainer');
            const closeBtn = document.getElementById('closeBtn');

            chatBubble.addEventListener('click', function () {
                chatContainer.classList.toggle('d-none');
            });

            closeBtn.addEventListener('click', function () {
                chatContainer.classList.add('d-none');
            });

            // Search functionality
            const searchInput = document.querySelector('#searchBar');
            const productCards = document.querySelectorAll('.product-card');

            searchInput.addEventListener('input', function () {
                const searchValue = searchInput.value.toLowerCase();
                productCards.forEach(card => {
                    const productName = card.getAttribute('data-name').toLowerCase();
                    if (productName.includes(searchValue)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Handling user input via Enter key press
            const userInput = document.getElementById('userInput');
            const sendBtn = document.getElementById('sendBtn');
            userInput.addEventListener('keypress', function (event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    sendMessage(); 
                }
            });

            // Function to handle sending messages
            function sendMessage() {
                const message = userInput.value.trim();
                if (message !== "") {
                    displayMessage('User', message);
                    userInput.value = ""; 

                    fetch(`/PublicProducts/GetResponse?message=${encodeURIComponent(message)}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.answer) {
                                displayMessage('Bot', data.answer);
                            } else {
                                displayMessage('Bot', 'How can I help you today?');
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching response:', error);
                            displayMessage('Bot', 'How can I help you today?');
                        });
                }
            }

            // Event listener for the Send button
            sendBtn.addEventListener('click', function () {
                sendMessage();
            });

            function askQuestion(question, answer) {
                displayMessage('User', question);
                displayMessage('Bot', answer);
            }

            function displayMessage(sender, message) {
                const chatBody = document.getElementById('chatBody');
                const messageElement = document.createElement('div');
                const messageText = document.createElement('div');
                if (sender === 'User') {
                    messageElement.className = 'user-message-container';
                    messageText.className = 'user-message bg-primary text-white p-2 rounded mb-2';
                } else {
                    messageElement.className = 'bot-message-container';
                    messageText.className = 'bot-message bg-secondary text-white p-2 rounded mb-2';
                }
                messageText.textContent = message;
                messageElement.appendChild(messageText);
                chatBody.appendChild(messageElement);
                chatBody.scrollTop = chatBody.scrollHeight; 
            }
        });
    </script>

    <script src="https://kit.fontawesome.com/a076d05399.js"></script> 
}

<style>
    .category-list {
        display: flex;
        gap: 10px;
        justify-content: center;
        align-items: center;
        margin-bottom: 1rem;
    }

    .btn-category {
        background-color: #0E9BA8;
        border-color: #0E9BA8;
        color: #fff;
        padding: 0.5rem 1rem;
        border-radius: 5px;
    }

        .btn-category:hover {
            background-color: #0C8B97;
            border-color: #0C8B97;
        }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1rem;
    }

    #searchBar {
        width: 500px;
        margin: 0 10px;
    }

    .btn-search {
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
    }

    .card {
        width: 300px;
        margin: auto;
    }

    .card-img-top {
        height: 180px;
        object-fit: cover;
        width: 50%;
        display: block;
        margin: 0 auto;
    }

    .card-body {
        padding: 1rem;
    }

    .card-title {
        font-size: 1.25rem;
    }

    .card-text {
        font-size: 0.875rem;
    }

    .btn-primary {
        background-color: #0E9BA8 !important;
        border-color: #0E9BA8 !important;
        color: #fff !important;
    }

        .btn-primary:hover {
            background-color: #0C8B97 !important;
            border-color: #0C8B97 !important;
        }

    .btn-secondary {
        background-color: #0E9BA8 !important;
        border-color: #0E9BA8 !important;
        color: #fff !important;
    }

        .btn-secondary:hover {
            background-color: #0C8B97 !important;
            border-color: #0C8B97 !important;
        }

    .display-4 {
        font-size: 2.5rem;
        font-weight: 300;
        color: #333;
    }

    .lead {
        font-size: 1.25rem;
        color: #666;
    }

    .chat-header {
        background-color: #ffffff;
        border-bottom: 1px solid #e0e0e0;
        text-align: center;
        padding: 20px;
        font-size: 1.2rem;
        background-color: #0C8B97;
    }

    .chat-header-content {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-header .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
        font-size: 20px;
        font-weight: bold;
    }

    .chatbot-icon {
        width: 50px;
        height: 50px;
        margin-right: 10px;
    }

    .chatbot-container {
        width: 350px;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        position: fixed;
        bottom: 30px;
        right: 100px; 
        background-color: #f9f9f9;
        overflow: hidden;
        z-index: 1000;
        max-height: 500px;
        transition: transform 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
    }



    .chat-footer {
        background-color: #f5f5f5;
        padding: 10px;
        text-align: center;
        display: flex; 
        align-items: center; 
        gap: 10px;
    }

;    .form-control {
        flex-grow: 1; 
        margin-right: 10px; 
    }

    .btn-send {
        padding: 0.375rem 0.75rem; 
    }

    .chat-buttons button:hover {
        background-color: #b2ebf2;
        cursor: pointer;
    }

    .chat-bubble {
        position: fixed;
        bottom: 30px;
        right: 30px;
        color: white;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        z-index: 1001;
    }

        .chat-bubble i {
            font-size: 28px;
        }
    .bot-message, .user-message {
        padding: 10px 15px;
        border-radius: 10px;
        max-width: 80%;
        margin-bottom: 10px;
        word-wrap: break-word;
        display: inline-block; 
    }

    .bot-message-container {
        display: flex;
        justify-content: flex-start; 
        margin-bottom: 10px;
    }

    .bot-message {
        background-color: #e1f5fe;
        color: #0277bd;
        text-align: left;
    }

    .user-message-container {
        display: flex;
        justify-content: flex-end; 
        margin-bottom: 10px;
    }

    .user-message {
        background-color: #e3f2fd;
        color: #0d47a1;
        text-align: right;
    }

    .chat-icon {
        width: 100px; 
        height: 100px; 
        display: block; 
    }

    .chat-body {
        display: flex;
        flex-direction: column;
    }

    .chat-buttons button {
        display: block;
        width: 90%; 
        margin: 10px auto; 
        text-align: center; 
        background-color: #ffffff; 
        color: #00acc1; 
        border-radius: 20px; 
        border: 2px solid #00acc1; 
        padding: 10px 20px; 
        font-size: 16px; 
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
        cursor: pointer; 
        transition: background-color 0.3s, color 0.3s; 
    }

        .chat-buttons button:hover {
            background-color: #00acc1; 
            color: #ffffff; 
        }


    .chat-img {
        width: 150px; 
        height: 120px; 
        object-fit: cover; 
        margin-right: 10px; 
    }

    #sendBtn {
        padding: 6px 12px; 
        font-size: 16px; 
        display: flex;
        align-items: center;
        justify-content: center;
    }

        #sendBtn i {
            color: white; 
        }

</style>